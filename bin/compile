#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

: ${LIBUV_VERSION:="1.10.1"}
: ${DOTNET_SDK_VERSION:="1.0.0-preview2-1-003177"}

NUGET_XMLDOC_MODE=skip
DOTNET_CLI_TELEMETRY_OPTOUT=1
DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1

SRC_DIR=`mktemp -d`
# Move the app source code into temporary src dir using subshell to not leak shopt
(
	shopt -s dotglob
	mv ${BUILD_DIR}/* ${SRC_DIR}
)

mkdir -p $BUILD_DIR/.profile.d

# TODO: factor this out into method
DEB_DIR=`mktemp -d`
curl -o ${DEB_DIR}/libunwind8_1.1-3.2_amd64.deb -LOs https://mirrors.kernel.org/ubuntu/pool/main/libu/libunwind/libunwind8_1.1-3.2_amd64.deb
mkdir -p ${BUILD_DIR}/.apt
dpkg -x ${DEB_DIR}/libunwind8_1.1-3.2_amd64.deb $BUILD_DIR/.apt/
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"

cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
EOF

mkdir -p ${CACHE_DIR}

DOTNET_SDK_DOWNLOAD_URL=https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/$DOTNET_SDK_VERSION/dotnet-dev-ubuntu-x64.$DOTNET_SDK_VERSION.tar.gz

mkdir -p ${BUILD_DIR}/dotnet
curl -SL $DOTNET_SDK_DOWNLOAD_URL | tar xz -C ${BUILD_DIR}/dotnet
find ${BUILD_DIR}/dotnet//sdk/${DOTNET_SDK_VERSION}/runtimes -maxdepth 0 ! -name unix -exec rm -r {} +
rm ${BUILD_DIR}/dotnet/sdk/$DOTNET_SDK_VERSION/nuGetPackagesArchive.lzma
cat <<EOF >$BUILD_DIR/.profile.d/000_dotnet.sh
export PATH="\$HOME/dotnet:\$PATH"
EOF

# Build the project
DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$PROJECT" ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/${PROJECT}
	echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
	echo "Project file configured in .deployment file"
else
	PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
	printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
	PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

dotnet restore ${PROJECT_JSON_FILE}

dnu publish ${PROJECT_JSON_FILE} --output ${BUILD_DIR} $DNU_FLAGS --runtime active --no-source --configuration Release 

curl https://github.com/friism/libuv-builder/releases/download/v${LIBUV_VERSION}/libuv-${LIBUV_VERSION}.tar.gz -sL \
	 | tar xz -C ${BUILD_DIR}
cat <<EOF >$BUILD_DIR/.profile.d/000_libuv.sh
export LD_LIBRARY_PATH="\$HOME/libuv/lib:\$LD_LIBRARY_PATH"
EOF

# TODO: read Procfile from `commands` in project.json
if [ -e ${SRC_DIR}/Procfile ]; then
	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
	cat << EOT >> ${BUILD_DIR}/Procfile
web: ASPNETCORE_URLS='http://+:\$PORT' dotnet . -c Release
EOT
	fi
fi
